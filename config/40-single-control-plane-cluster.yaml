---
# This playbook installs a Kubernetes cluster with a single controlplane node.
#
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
- hosts: all
  gather_facts: false
  any_errors_fatal: true

  vars:
    controlplane:
      - rp0.jpeach.org
    tokenfile: "{{playbook_dir}}/bootstrap-token"

  tasks:

  - name: Preflight
    raw: "sudo kubeadm init phase preflight"

  - name: Generate bootstrap token
    run_once: true
    delegate_to: localhost
    shell: "ssh {{ansible_user}}@{{inventory_hostname}} kubeadm token generate > {{tokenfile}}"
    args:
      creates: "{{tokenfile}}"

  # From this point, we can fish the bootstrap token out of
  # config/boostrap-token by using a playbook lookup.
  #
  # https://docs.ansible.com/ansible/latest/user_guide/playbooks_lookups.html

  - name: Generate bootstrap config
    run_once: true
    delegate_to: localhost
    template:
      src: "{{playbook_dir}}/bootstrap.j2"
      dest: "{{playbook_dir}}/bootstrap.yaml"
    vars:
      # kubeadm component configurations. Each value in this dictionary
      # is emitted as YAML and concatenated into bootstrap.yaml
      components:
        kubelet:
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          cgroupDriver: "systemd"
        bootstrap:
          apiVersion: kubeadm.k8s.io/v1beta2
          kind: InitConfiguration
          bootstrapTokens:
            - groups:
                - system:bootstrappers:kubeadm:default-node-token
              token: "{{ lookup('file', tokenfile) }}"
              ttl: 24h0m0s
              usages:
                - signing
                - authentication
          nodeRegistration:
            criSocket: /run/containerd/containerd.sock

  - name: Copy bootstrap configuration
    delegate_to: localhost
    command: "rsync -a -zz {{item}} {{ansible_user}}@{{inventory_hostname}}:~"
    with_items: "{{playbook_dir}}/bootstrap.yaml"

  - name: Initialize control plane hosts
    raw: "sudo kubeadm init --config=bootstrap.yaml"
    when:
      - inventory_hostname in controlplane

  # TODO(jpeach) join non-controlplane hosts

  - name: Join data plane hosts
    raw: "echo sudo kubeadm join"
    when:
      - inventory_hostname not in controlplane

  - name: Remove bootstrap token
    run_once: true
    delegate_to: localhost
    command: "rm -f {{tokenfile}} bootstrap.yaml"
    args:
      warn: false
      removes:
        - "{{tokenfile}}"
        - "bootstrap.yaml"

# vim: set et sw=2 ts=2 sts=2 et:

